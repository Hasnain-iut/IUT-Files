DROP TABLE CUSTOMER CASCADE CONSTRAINTS;
DROP TABLE PLAN;
DROP TABLE SIM;
DROP TABLE CALLS;

--2A
CREATE TABLE CUSTOMER(
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(20),
    DOB DATE,
    ADDRESS VARCHAR2(100)
);

CREATE TABLE PLAN(
    NAME VARCHAR2(20) PRIMARY KEY,
    CHARGE NUMBER
);

CREATE TABLE SIM(
    SIM_NO VARCHAR2(11) PRIMARY KEY,
    CID NUMBER,
    PLAN VARCHAR2(20),
    FOREIGN KEY (CID) REFERENCES CUSTOMER,
    FOREIGN KEY (PLAN) REFERENCES PLAN
);

CREATE TABLE CALLS(
    CALLID VARCHAR2(20),
    SIM_NO VARCHAR2(11),
    CALLBEGIN TIMESTAMP,
    CALLEND TIMESTAMP,
    CHARGE NUMBER,
    FOREIGN KEY (SIM_NO) REFERENCES SIM
);


--2B
CREATE OR REPLACE FUNCTION CALC_CHARGE(SIM_NO SIM.SIM_NO%TYPE, CALLBEGIN CALLS.CALLBEGIN%TYPE,
CALLEND CALLS.CALLEND%TYPE)
RETURN NUMBER
IS 
    MINUTES NUMBER;
    CHARGES NUMBER;
BEGIN
    SELECT EXTRACT (MINUTE FROM DIFF) INTO MINUTES
    FROM (SELECT (CALLEND - CALLBEGIN) DIFF FROM DUAL);

    MINUTES:= CEIL(MINUTES);
    SELECT CHARGE INTO CHARGES FROM PLAN WHERE
    NAME = (SELECT NAME FROM SIM WHERE SIM_NO = SIM_NO);
    
    CHARGES:= CHARGES * MINUTES;

RETURN CHARGES;
END;
/

--2C

CREATE OR REPLACE FUNCTION GENERATE_ID(CALLBEGIN CALLS.CALLBEGIN%TYPE)
RETURN VARCHAR2
IS 

CURSOR C IS 
SELECT MAX(CALLID) FROM
CALLS WHERE CALLBEGIN = CALLBEGIN;

MAX_ID CALLS.CALLID%TYPE;

BEGIN 
    OPEN C;
    IF C%FOUND THEN
        FETCH C INTO MAX_ID;

        MAX_ID:= SUBSTR(MAX_ID, 10, 8);
        MAX_ID:= LPAD(TO_CHAR((TO_NUMBER(MAX_ID) +1)), '0', 8);

        MAX_ID:= TO_CHAR(CALLBEGIN, 'YYYYDDMM') || '.' ||MAX_ID;
    ELSE
        MAX_ID:= TO_CHAR(CALLBEGIN, 'YYYYDDMM') || '.' ||'00000001';
    END IF;

RETURN MAX_ID;
END;
/

CREATE OR REPLACE TRIGGER EXECUTE 
AFTER INSERT ON CALLS 
FOR EACH ROW
DECLARE
    ID CALLS.CALLID%TYPE;
begin
    SELECT GENERATE_ID(:NEW.CALLBEGIN) INTO ID FROM DUAL;
    INSERT INTO CALLS (CALLID) VALUES(ID);
end;
/
--3
DROP TABLE STUDENTS CASCADE CONSTRAINTS;
DROP TABLE MISCONDUCTS;
DROP TABLE STUDENTTRANSACTIONS;
CREATE TABLE STUDENTS(
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(20),
    PROGRAM VARCHAR2(30),
    YEAR NUMBER,
    CGPA NUMBER
);

CREATE TABLE MISCONDUCTS(
    STUDENTID NUMBER,
    DATE_TIME TIMESTAMP,
    DESCRIPTION VARCHAR2(200),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENTS
);

CREATE TABLE STUDENTTRANSACTIONS(
    STUDENTID NUMBER,
    DATE_TIME TIMESTAMP,
    AMOUNT NUMBER
);

CREATE OR REPLACE FUNCTION DISTRIBUTE(TOTAL IN NUMBER, PER IN NUMBER, RECEIVED OUT NUMBER)
RETURN NUMBER
IS 
    INITIALLY_SELECTED NUMBER;
    TOTAL_AMOUNT NUMBER;
BEGIN 
    TOTAL_AMOUNT:= TOTAL;
    RECEIVED := TRUNC(TOTAL/PER);

    SELECT COUNT(ID) INTO INITIALLY_SELECTED
    FROM STUDENTS WHERE PROGRAM = 'SOFTWARE ENGINEERING'
    AND YEAR = '2' AND CGPA > 3.5 AND ID NOT IN (
        SELECT ID FROM MISCONDUCTS  
    )ORDER BY CGPA DESC;

    FOR I IN (
    SELECT ID, NAME
    FROM STUDENTS WHERE PROGRAM = 'SOFTWARE ENGINEERING'
    AND YEAR = '2' AND CGPA > 3.5 AND ID NOT IN (
        SELECT ID FROM MISCONDUCTS  
    )ORDER BY CGPA DESC ) loop
      
        IF PER > TOTAL_AMOUNT THEN
            EXIT;
        END IF;

        INSERT INTO STUDENTTRANSACTIONS (STUDENTID, DATE_TIME, AMOUNT) VALUES (I.ID, SYSDATETIME, PER);
        
        TOTAL_AMOUNT := TOTAL_AMOUNT - PER;

    end loop;

    INITIALLY_SELECTED:=INITIALLY_SELECTED-RECEIVED;

RETURN INITIALLY_SELECTED;
END;
/

