SET SERVEROUPUT ON
--1 
CREATE OR REPLACE PROCEDURE BUDGET_INC 
AS
    X NUMBER DEFAULT 0;
BEGIN
    UPDATE DEPARTMENT SET BUDGET = BUDGET - 0.10*BUDGET WHERE BUDGET > 99999;

    FOR I IN (SELECT * FROM DEPARTMENT) LOOP
        IF I.BUDGET <= 99999 THEN
            X := X + 1;
        END IF;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(X);
END;
/

BEGIN
    BUDGET_INC;
END;
/

--2
CREATE OR REPLACE PROCEDURE INSTRUCTOR_TIME(WEEK_DAY IN varchar2, START_TIME IN NUMBER, END_TIME IN NUMBER)
AS 
BEGIN

    FOR ROW IN (
    SELECT NAME FROM instructor WHERE ID IN
    (SELECT ID FROM teaches WHERE course_id IN 
    (SELECT course_id FROM SECTION WHERE time_slot_id = 
    (SELECT time_slot_id FROM time_slot T WHERE day = SUBSTR(WEEK_DAY, 1,2) AND 
    T.start_hr = START_TIME
    AND T.end_hr = END_TIME)))) LOOP

        DBMS_OUTPUT.PUT_LINE(ROW.NAME);

    END LOOP;

END;
/

--3

CREATE OR REPLACE PROCEDURE TOP_N_STUDENTS(N IN NUMBER)
AS
BEGIN
    FOR ROW IN (
        SELECT ID, max(NAME)AS ST_NAME, max(DEPT_NAME) AS ST_DEPT
        , count(course_id) AS COURSES
        FROM (SELECT * FROM student NATURAL JOIN takes) WHERE ROWNUM <=N GROUP BY 
        ID ORDER BY COURSES DESC 
    ) LOOP

        DBMS_OUTPUT.PUT_LINE(ROW.ID || ' ' || ROW.ST_NAME || ' '|| ROW.ST_DEPT ||' '|| ROW.COURSES);
    END LOOP;

END;
/


--4
CREATE SEQUENCE SEQ
MINVALUE 0001
MAXVALUE 9999
START WITH 1
INCREMENT BY 1
CACHE 20;

CREATE OR REPLACE TRIGGER ST_ID_GENERATOR
BEFORE INSERT ON student 
FOR EACH ROW
BEGIN
    SELECT STUDENT_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

--5
CREATE OR REPLACE TRIGGER ADVISORY
BEFORE INSERT ON
    student
    FOR EACH ROW
DECLARE 
    INSTRUCTOR_ID advisor.i_id%TYPE;
BEGIN  
    SELECT i_id INTO INSTRUCTOR_ID FROM (SELECT i_id FROM advisor WHERE s_id<>:NEW.ID)
    WHERE ROWNUM<=1;
    INSERT INTO advisor(i_ID, s_id) values(INSTRUCTOR_ID, :NEW.ID);
END;
/