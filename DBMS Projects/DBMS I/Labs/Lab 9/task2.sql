CREATE 
OR REPLACE PROCEDURE TOP_MOVIES(NUM IN NUMBER) AS MOV_NUM NUMBER;
BEGIN 
SELECT 
  COUNT(*) INTO MOV_NUM 
FROM 
  MOVIE;
IF NUM > MOV_NUM THEN DBMS_OUTPUT.PUT_LINE('ERROR');
ELSE FOR ROW IN (
  SELECT 
    * 
  FROM 
    (
      SELECT 
        MOVIE.MOV_ID, 
        MOVIE.MOV_TITLE, 
        MOVIE.MOV_YEAR, 
        MOVIE.MOV_LANGUAGE, 
        MOVIE.MOV_RELEASEDATE, 
        MOVIE.MOV_COUNTRY, 
        SUM(RATING.REV_STARS)/ COUNT(RATING.REV_STARS) AS AVG_RATING 
      FROM 
        RATING, 
        MOVIE 
      WHERE 
        RATING.MOV_ID = MOVIE.MOV_ID 
      GROUP BY 
        MOVIE.MOV_ID, 
        MOVIE.MOV_TITLE, 
        MOVIE.MOV_YEAR, 
        MOVIE.MOV_LANGUAGE, 
        MOVIE.MOV_RELEASEDATE, 
        MOVIE.MOV_COUNTRY 
      ORDER BY 
        AVG_RATING DESC
    ) 
  WHERE 
    ROWNUM <= NUM
) LOOP DBMS_OUTPUT.PUT_LINE(
  ROW.MOV_ID || ' ' || ROW.MOV_TITLE || ' ' || ROW.MOV_YEAR || ' ' || ROW.MOV_LANGUAGE || ' ' || ROW.MOV_RELEASEDATE || ' ' || ROW.MOV_COUNTRY || ' ' || ROW.AVG_RATING
);
END LOOP;
END IF;
END;
/ 

BEGIN TOP_RATED_MOVIES(10);
END;
/ 

CREATE 
OR REPLACE FUNCTION MOVIE_STAT (TITLE MOVIE.MOV_TITLE % TYPE) RETURN VARCHAR AS ACT_NUM NUMBER;
BEGIN 
SELECT 
  COUNT(*) INTO ACT_NUM 
FROM 
  MOVIE, 
  CASTS, 
  ACTOR 
WHERE 
  MOVIE.MOV_ID = CASTS.MOV_ID 
  AND CASTS.ACT_ID = ACTOR.ACT_ID 
  AND MOVIE.MOV_TITLE = TITLE 
GROUP BY 
  MOVIE.MOV_ID;
IF ACT_NUM > 1 THEN RETURN 'ENSEMBLE';
ELSE RETURN 'SOLO';
END IF;
END;
/ 


BEGIN DBMS_OUTPUT.PUT_LINE(
  MOVIE_STATUS('The Prestige')
);
END;
/ 


CREATE 
OR REPLACE PROCEDURE OSCAR_NOMINATIONS AS BEGIN FOR ROW IN (
  SELECT 
    DIRECTOR.DIR_FIRSTNAME, 
    DIRECTOR.DIR_LASTNAME, 
    RATED_MOVIES.MOV_ID 
  FROM 
    (
      SELECT 
        MOVIE.MOV_ID 
      FROM 
        RATING, 
        MOVIE 
      WHERE 
        RATING.MOV_ID = MOVIE.MOV_ID 
      GROUP BY 
        MOVIE.MOV_ID, 
        MOVIE.MOV_TITLE 
      HAVING 
        SUM(RATING.REV_STARS)/ COUNT(RATING.REV_ID) >= 7 
        AND COUNT(*) >= 10
    ) RATED_MOVIES, 
    DIRECTION, 
    DIRECTOR 
  WHERE 
    RATED_MOVIES.MOV_ID = DIRECTION.MOV_ID 
    AND DIRECTION.DIR_ID = DIRECTOR.DIR_ID
) LOOP DBMS_OUTPUT.PUT_LINE(
  ROW.DIR_FIRSTNAME || ' ' || ROW.DIR_LASTNAME
);
END LOOP;
END;
/ 

BEGIN OSCAR_NOMINATIONS;
END;
/ 


CREATE 
OR REPLACE FUNCTION MOVIE_CATEGORY(TITLE MOVIE.MOV_TITLE % TYPE) RETURN VARCHAR AS RELEASEDATE DATE;
AVG_RATING RATING.REV_STARS % TYPE;
YEAR VARCHAR(5);
BEGIN 
SELECT 
  MOVIE.MOV_RELEASEDATE INTO RELEASEDATE 
FROM 
  MOVIE 
WHERE 
  MOVIE.MOV_TITLE = TITLE;
SELECT 
  SUM(RATING.REV_STARS)/ COUNT(*) INTO AVG_RATING 
FROM 
  MOVIE, 
  RATING 
WHERE 
  MOVIE.MOV_ID = RATING.MOV_ID 
  AND MOVIE.MOV_TITLE = TITLE;
YEAR := TO_CHAR(RELEASEDATE, 'YYYY');
IF YEAR >= 1950 
AND YEAR < 1960 
AND AVG_RATING > 6.5 THEN RETURN 'Fantastic Fifties';
ELSIF YEAR >= 1960 
AND YEAR < 1970 
AND AVG_RATING > 6.7 THEN RETURN 'Sweet Sixties';
ELSIF YEAR >= 1970 
AND YEAR < 1980 
AND AVG_RATING > 6.9 THEN RETURN 'Super Seventies';
ELSIF YEAR >= 1980 
AND YEAR < 1990 
AND AVG_RATING > 7.1 THEN RETURN 'Ecstatic Eighties';
ELSIF YEAR >= 1990 
AND YEAR < 2000 
AND AVG_RATING > 7.3 THEN RETURN 'Neat Nineties';
ELSE RETURN 'Garbage';
END IF;
END;
/ 

BEGIN DBMS_OUTPUT.PUT_LINE(
  MOVIE_CATEGORY('Chinatown')
);
END;
/
